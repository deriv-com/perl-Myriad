=encoding utf8

=head1 NAME

Myriad::Guide::Tutorial - introduction and tutorial for the L<Myriad> framework

=head1 TUTORIAL

Most of the time, you would use the L<myriad.pl> script to run everything.

The L<Myriad> framework handles loading, logging, configuration and other tasks: you provide
services which implement functionality, and wire them together. Instead of implementing top-level code,
those services can call each other or subscribe to data streams.

=head2 Run code on startup

Each service has a C<startup> method - this is where you put code that should run once the service is
loaded and ready.

# EXAMPLE: lib/Myriad/Example/Startup.pm

To test this out, run this from a terminal or shell:

 myriad.pl service Myriad::Example::Startup

There are 3 key lines here - firstly, we give our service a name:

 package Myriad::Example::Startup

Every service has a unique name, and we can have multiple instances of a given service (for example, connecting to different database shards or serving different domain names for a webhook).

Next, we load the framework and indicate that this is a service:

 use Myriad::Service ':v1';

This line applies C<strict>, C<warnings>, and many other "standard" settings - see L<Myriad::Class> for more details.

Next, we provide methods - in this case, a C<startup> method:

 async method startup (%args) {

We're using L<Object::Pad> for the C<method> keyword - every service is a Perl OO class, and L<Object::Pad> is the prototype for the planned Perl core OO implementation.
The C<async> keyword comes from L<Future::AsyncAwait> - it allows us to use the C<await> keyword if there are any asynchronous operations that should complete before
we return.

=head2 An RPC call

"Remote procedure calls", usually abbreviated RPC, are the basic building blocks for services. Creating a method marked as C<RPC> tells Myriad that this method should be available for other services to call.

# EXAMPLE: lib/Myriad/Example/RPC.pm

We use L<subroutine attributes|perlsub/"Subroutine Attributes"> to mark a method as an RPC call.

To test this out, run this from a terminal or shell:

 myriad.pl service Myriad::Example::RPC rpc myriad.example.rpc

=head2 Simple RPC echo method

This service takes parameters, in this case returning them as the result from the RPC call:

# EXAMPLE: lib/Myriad/Example/Echo.pm

You can test this with the following command:

 myriad.pl service Myriad::Example::RPC rpc myriad.example.echo/message='{"message":"example message"}'

(note that if you're on Windows, you may need to run this under PowerShell or WSL terminal, due to the
nested quotes)

=head2 Call another service

This service takes parameters, in this case returning them as the result from the RPC call:

# EXAMPLE: lib/Myriad/Example/Call.pm

You can test this with the following command:

 myriad.pl service Myriad::Example::Call rpc myriad.example.call/remote_call

(note that if you're on Windows, you may need to run this under PowerShell or WSL terminal, due to the
nested quotes)

=head2 Call another service

This service takes parameters, in this case returning them as the result from the RPC call:

# EXAMPLE: lib/Myriad/Example/Call.pm

You can test this with the following command:

 myriad.pl service Myriad::Example::Call rpc myriad.example.call/remote_call

(note that if you're on Windows, you may need to run this under PowerShell or WSL terminal, due to the
nested quotes)

=cut

